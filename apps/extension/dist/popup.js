console.log("Popup initialized");const l="workflow_recorder_events",r=document.getElementById("eventsContainer"),m=document.getElementById("emptyState"),E=document.getElementById("eventCount"),v=document.getElementById("refreshBtn"),g=document.getElementById("clearBtn"),p=document.getElementById("exportCsvBtn");function u(e){return new Date(e).toLocaleString()}async function a(){try{console.log("Loading events from storage...");const n=(await chrome.storage.local.get(l))[l]||[];console.log(`Loaded ${n.length} events`),E.textContent=`(${n.length})`,r.innerHTML="",n.length===0?r.appendChild(m):(n.sort((o,t)=>t.ts-o.ts),n.forEach(o=>{var d;const t=document.createElement("div");t.className="event-item";const s=document.createElement("div");s.className="event-time",s.textContent=u(o.ts);const i=document.createElement("div");i.textContent=o.activity;const c=document.createElement("div");c.textContent=((d=o.attributes)==null?void 0:d.url)||"No URL",c.style.fontSize="12px",t.appendChild(s),t.appendChild(i),t.appendChild(c),r.appendChild(t)}))}catch(e){console.error("Error loading events:",e),r.innerHTML="<p>Error loading events. Check console for details.</p>"}}async function C(){try{console.log("Clearing all events..."),await chrome.storage.local.set({[l]:[]}),a()}catch(e){console.error("Error clearing events:",e)}}async function h(){try{console.log("Exporting events to CSV...");const e=await chrome.runtime.sendMessage({command:"flushEvents"});console.log("Export response:",e),e.status==="success"?alert("Events exported to CSV successfully!"):alert(`Error exporting events: ${e.error||"Unknown error"}`)}catch(e){console.error("Error exporting events to CSV:",e),alert(`Error exporting events: ${e.message||e}`)}}v.addEventListener("click",a);g.addEventListener("click",C);p.addEventListener("click",h);a();
