const n="workflow_recorder_events";class l{static async init(){console.log("Initializing storage service...");const e=new l;try{const o=await chrome.storage.local.get(n);o[n]?console.log(`Found ${o[n].length} existing events in storage`):(await chrome.storage.local.set({[n]:[]}),console.log("Initialized empty events array in chrome.storage.local"))}catch(o){console.error("Error initializing storage:",o),await chrome.storage.local.set({[n]:[]})}return e}async addEvent(e){try{console.log("Adding event to storage:",e);const a=(await chrome.storage.local.get(n))[n]||[];a.push({...e,caseId:e.caseId,activity:e.activity,ts:e.ts||Date.now()}),await chrome.storage.local.set({[n]:a}),console.log("Event added successfully, total events:",a.length);const r=await chrome.storage.local.getBytesInUse(n);console.log(`Storage usage: ${r} bytes`)}catch(o){throw console.error("Error adding event to storage:",o),o}}async getAllEvents(){try{return(await chrome.storage.local.get(n))[n]||[]}catch(e){return console.error("Error getting events from storage:",e),[]}}async getEventsByCaseId(e){try{return(await this.getAllEvents()).filter(a=>a.caseId===e)}catch(o){return console.error(`Error getting events for case ${e}:`,o),[]}}async clearEvents(){try{await chrome.storage.local.set({[n]:[]}),console.log("All events cleared from storage")}catch(e){throw console.error("Error clearing events from storage:",e),e}}async exportToCSV(){try{const e=await this.getAllEvents();let a=["case_id","activity","timestamp","url","title","visible_text","tag"].join(",")+`
`;return e.forEach(r=>{var i,u,v,h;const c=[r.caseId,r.activity,new Date(r.ts).toISOString(),((i=r.attributes)==null?void 0:i.url)||"",((u=r.attributes)==null?void 0:u.title)||"",((v=r.attributes)==null?void 0:v.visible_text)||"",((h=r.attributes)==null?void 0:h.tag)||""].map(y=>{const g=String(y);return g.includes(",")||g.includes('"')||g.includes(`
`)?`"${g.replace(/"/g,'""')}"`:g});a+=c.join(",")+`
`}),a}catch(e){throw console.error("Error exporting events to CSV:",e),e}}async exportToXES(){const e=await this.getAllEvents();return JSON.stringify(e)}}console.log("SW ready");let s=null;l.init().then(t=>(console.log("Storage service initialized successfully"),s=t,t.getAllEvents())).then(t=>{console.log(`Loaded ${t.length} events from storage`),t.length===0&&(console.log("Adding a test event for debugging"),s==null||s.addEvent({caseId:"test-session-1",activity:"Click: Test Button",ts:Date.now(),attributes:{url:"https://example.com/test",title:"Test Page",visible_text:"Test Button",tag:"button"}}))}).catch(t=>console.error("Failed to initialize storage service:",t));chrome.runtime.onInstalled.addListener(()=>{console.log("Extension installed"),s||l.init().then(t=>{console.log("Storage service initialized on installation"),s=t}).catch(t=>console.error("Failed to initialize storage service on installation:",t))});async function w(){console.log("Flushing events to CSV...");try{s||(console.log("Storage service not initialized, initializing now..."),s=await l.init());const t=await s.exportToCSV(),e=`data:text/csv;charset=utf-8,${encodeURIComponent(t)}`;chrome.downloads.download({url:e,filename:"log.xes.csv",saveAs:!1},o=>{chrome.runtime.lastError?console.error("Error downloading CSV:",chrome.runtime.lastError):console.log("CSV download started with ID:",o)})}catch(t){throw console.error("Error flushing events to CSV:",t),t}}chrome.runtime.onMessage.addListener((t,e,o)=>{var a,r;if(console.log("Received message:",t),t&&t.caseId&&t.activity&&t.ts){console.log("Received event from content script:",t),console.log("From tab:",(a=e.tab)==null?void 0:a.id,(r=e.tab)==null?void 0:r.url);const d={caseId:t.caseId,activity:t.activity,ts:t.ts,attributes:t.attributes||{}};return(async()=>{try{s||(console.log("Storage service not initialized, initializing now..."),s=await l.init()),await s.addEvent(d),console.log("Event saved to storage"),o({status:"saved"})}catch(i){console.error("Failed to save event to storage:",i),o({status:"error",error:i instanceof Error?i.message:String(i)})}})(),!0}return t&&t.command==="flushEvents"?((async()=>{try{await w(),o({status:"success",message:"Events flushed to CSV"})}catch(c){o({status:"error",error:c instanceof Error?c.message:String(c)})}})(),!0):(o({status:"error",error:"Invalid message data"}),!0)});chrome.runtime.onConnect.addListener(t=>{console.log("Port connected:",t.name)});
