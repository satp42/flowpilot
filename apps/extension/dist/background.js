const r="workflow_recorder_events";class s{static async init(){console.log("Initializing storage service...");const e=new s;try{const o=await chrome.storage.local.get(r);o[r]?console.log(`Found ${o[r].length} existing events in storage`):(await chrome.storage.local.set({[r]:[]}),console.log("Initialized empty events array in chrome.storage.local"))}catch(o){console.error("Error initializing storage:",o),await chrome.storage.local.set({[r]:[]})}return e}async addEvent(e){try{console.log("Adding event to storage:",e);const a=(await chrome.storage.local.get(r))[r]||[];a.push({...e,caseId:e.caseId,activity:e.activity,ts:e.ts||Date.now()}),await chrome.storage.local.set({[r]:a}),console.log("Event added successfully, total events:",a.length);const i=await chrome.storage.local.getBytesInUse(r);console.log(`Storage usage: ${i} bytes`)}catch(o){throw console.error("Error adding event to storage:",o),o}}async getAllEvents(){try{return(await chrome.storage.local.get(r))[r]||[]}catch(e){return console.error("Error getting events from storage:",e),[]}}async getEventsByCaseId(e){try{return(await this.getAllEvents()).filter(a=>a.caseId===e)}catch(o){return console.error(`Error getting events for case ${e}:`,o),[]}}async clearEvents(){try{await chrome.storage.local.set({[r]:[]}),console.log("All events cleared from storage")}catch(e){throw console.error("Error clearing events from storage:",e),e}}async exportToXES(){const e=await this.getAllEvents();return JSON.stringify(e)}}console.log("SW ready");let n=null;s.init().then(t=>(console.log("Storage service initialized successfully"),n=t,t.getAllEvents())).then(t=>{console.log(`Loaded ${t.length} events from storage`)}).catch(t=>console.error("Failed to initialize storage service:",t));chrome.runtime.onInstalled.addListener(()=>{console.log("Extension installed"),n||s.init().then(t=>{console.log("Storage service initialized on installation"),n=t}).catch(t=>console.error("Failed to initialize storage service on installation:",t))});chrome.runtime.onMessage.addListener((t,e,o)=>{var a,i;if(console.log("Received event from content script:",t),console.log("From tab:",(a=e.tab)==null?void 0:a.id,(i=e.tab)==null?void 0:i.url),t&&t.caseId&&t.activity&&t.ts){const l={caseId:t.caseId,activity:t.activity,ts:t.ts,attributes:t.attributes||{}};return(async()=>{try{n||(console.log("Storage service not initialized, initializing now..."),n=await s.init()),await n.addEvent(l),console.log("Event saved to storage"),o({status:"saved"})}catch(c){console.error("Failed to save event to storage:",c),o({status:"error",error:c instanceof Error?c.message:String(c)})}})(),!0}return o({status:"error",error:"Invalid event data"}),!0});chrome.runtime.onConnect.addListener(t=>{console.log("Port connected:",t.name)});
